defaults:
  - _self_

name: AllegroXarmThrowing

physics_engine: ${..physics_engine}
asset_root: '../assets'


env:
  subtask: ""
  throw_far: False
  bucket_in_front: False
  use_leap: False 
  use_allegro: True
  urdfFolder: "ycb_real_inertia"
  # if given, will override the device setting in gym.
  #numEnvs: ${resolve_default:8192,${...num_envs}}
  numEnvs: ${...num_envs}
  envSpacing: 1.2
  episodeLength: 600 #change
  tablePosey: -0.15
  tablePosez: 0.023
  enableDebugVis: False
  enableVideoLog: False 
  videoLogIdx: 0
  videoLogFreq: 20
  evalStats: False  # extra evaluation-time statistics
  doSimpleObjects: True
  doVerySimpleObjects: False 
  doDexYcbObjects: False
  useSavedInitPose: False
  limitArmDeltaTarget: True
  useRandomInitRot: False
  addZerosInPrivBuf: False
  usePoseRewardUnlifted: False 
  usePoseRewardLifted: False
  useAllegroTips: False
  leapFingers: ["fingertip", "fingertip_2", "fingertip_3", "thumb_fingertip"] 
  leapDIP: ["dip", "dip_2", "dip_3", "thumb_dip"]
  initPoseVersion: v16
  useDIPFinger: False 
  lowmem: False
  input_priv: False
  enableVhacd: True 
  vhacdObjects: ['070-a','070-b','072','036','032','029','048','027','019','032','026']
  simpleObjects: ['002', '036', '010', '025', '024', '005']
  verysimpleObjects: ['002']
  DexYcbObjects: ['035','003','004','005','007','008','009','010','011', '021','024','025','002','036','037','040','051','052','061']
  
  clampAbsObservations: 10.0
  useOldActionSpace: True
  clampArmTarget: False

  stiffnessScale: 1.0
  forceLimitScale: 1.0
  useRelativeControl: False
  dofSpeedScale: 1.0
  actionsMovingAverage: 1.0
  controlFrequencyInv: 6 # 20 Hz
  jointVelocityLimit: 0.5

  resetPositionNoiseX: 0.1
  resetPositionNoiseY: 0.1
  resetPositionNoiseZ: 0.02
  resetRotationNoise: 1.0
  resetDofPosRandomIntervalFingers: 0.1
  resetDofPosRandomIntervalArm: 0.1
  resetDofVelRandomInterval: 0.


  pointCloudScale: 0.01
  # Random forces applied to the
  forceScale: 0.0
  forceProbRange: [0.001, 0.1]
  forceDecay: 0.99
  forceDecayInterval: 0.08

  resetOnArmCollision: False 
  ArmTableCollisionThreshold: 10
  resetOnCollision: False  
  ContactForceThreshold: 50
  resetOnFingerCrash: False
  FingerClearanceThreshold: 0.050

  liftingRewScale: 20.0
  distrMatchRewScale: 1.0 #used with dist_match_human
  pcRewRelativeScale: 0.0 #used with dist_match_human
  goalHeight: 0.45
  handJointRewCoeff: 1 #work on this 
  liftingBonus: 300.0
  liftingBonusThreshold: 0.10  # when the object is lifted this distance (in meters) above the table, the agent gets the lifting bonus
  keypointRewScale: 2000.0
  useFingertipReward: False 
  usePalmReward: False 
  useLiftingReward: False 
  useKeypointReward: True
  distanceDeltaRewScale: 50.0
  useFingertipShapeDistReward: False 
  useHandJointPoseRew: False 

  reachGoalBonus: 10000.0
  kukaActionsPenaltyScale: 0.003
  allegroActionsPenaltyScale: 0.0003
  fallDistance: 0.24
  fallPenalty: 0.0

  privilegedActions: False
  privilegedActionsTorque: 0.02

  # Physics v1, pretty much default settings we used from the start of the project
  dofFriction: 1.0  # negative values are ignored and the default friction from URDF file is used

  # gain of PD controller.
  handStiffness: 40.0 #increasing stiffness leads to stiffer movements
  armStiffness: 1000 #40.0
  handVelocity: 10.0
  armVelocity: 10.0

  handEffort: 0.35  # this is what was used in sim-to-real experiment. Motor torque in Newton*meters
  # armEffort: [300, 300, 300, 300, 300, 300, 300]  # see Physics v2
  armEffort: [500, 500, 500, 500, 500, 500, 500]  # see Physics v2

  handDamping: 5   #increasing damping leads to less local oscillatory moment
  armDamping: 100 #5

  handArmature: 0
  armArmature: 0

  keypointScale: 1.5
  objectBaseSize: 0.05
  numPointCloud: 100 

  randomizeObjectDimensions: True
  withSmallCuboids: True
  withBigCuboids: True
  withSticks: True

  objectType: "" #changing to ball only for now 
  observationType: "full_state"
  successTolerance: 0.075
  targetSuccessTolerance: 0.01
  toleranceCurriculumIncrement: 0.9  # multiplicative
  toleranceCurriculumInterval: 3000  # in env steps across all agents, with 8192 this is 3000 * 8192 = 24.6M env steps
  maxConsecutiveSuccesses: 2
  successSteps: 50  # how many steps we should be within the tolerance before we declare a success

  saveStates: False
  saveStatesFile: "rootTensorsDofStates.bin"

  loadInitialStates: False
  loadStatesFile: "rootTensorsDofStates.bin"
  enableProprioHistory: True
  enableFingertipPosHistory: True
  useObsAsProp: False
  useFingertipPosAsProp: False
  useDofVelObs: True
  enableActionHistory: True
  enableAttnMask: True
  enablePointCloud: True
  enableCameraSensors: False  
  # set to True if you use camera sensors in the environment
  rgbd_camera:
    enable_depth: False
    enable_rgb: False
    render_slowness: 1
    camera_width: 60
    camera_height: 60 
    buffer_width: 60
    buffer_height: 60
    fov: 60
    ss: 2 
    num_cameras: 1
    intrinsics: 'utils/camera.json'
    randomize_camera_pose: 0.04 #in meters
    randomize_camera_rot: 5 #in degrees 
    cam0:
      #pos: [0.20, -0.55, 0.65]
      #pos: [0.0, -0.31, 0.49]
      #pos: [0.12, -0.31, 0.55]
      pos: [0.12, -0.35, 0.60]
      target: [0.10, -0.25, 0.45]
    cam1:
      pos: [0.50, -0.15, 0.65]
      target: [0.0, -0.15, 0.6]
    wrist_camera: False 
  
  stage2_hist_len: 16  # 3 seconds of history #GRU history not yet

  asset:
    # Whis was the original kuka_allegro asset.
    # This URDF has some issues, i.e. weights of fingers are too high and the mass of the Allegro hand is too
    # high in general. But in turn this leads to smoother movements and better looking behaviors.
    # Additionally, collision shapes of fingertips are more primitive (just rough convex hulls), which
    # gives a bit more FPS.
    kukaAllegro: "urdf/kuka_allegro_description/kuka_allegro_touch_sensor.urdf"
    FrankAllegro: "urdf/franka_description/allegro_hand_description/franka_panda_allegro.urdf"
    # Xarm7_allegro: 'new_asset/xarm7_description_new/xarm7_allegro.urdf' #"urdf/xarm7_color.urdf" #"urdf/xarm7_hand.urdf"
    Xarm7_allegro: 'urdf/xarm7_allegro_vertical/xarm7_allegro.urdf' #"urdf/xarm7_color.urdf" #"urdf/xarm7_hand.urdf"
    Xarm7_leap_hand: "urdf/xarm7_leap.urdf"
    # This is the URDF which has more accurate collision shapes and weights.
    # I believe since the hand is much lighter, the policy has more control over the movement of both arm and
    # fingers which leads to faster training (better sample efficiency). But overall the resulting
    # behaviors look too fast and a bit unrealistic.
    # For sim-to-real experiments this needs to be addressed. Overall, v2 is a "Better" URDF, and it should not
    # lead to behaviors that would be worse for sim-to-real experiments. Most likely the problem is elsewhere,
    # for example the max torques might be too high, or the armature of the motors is too low.
    # The exercise of finding the right URDF and other parameters is left for the sim-to-real part of the project.
    # kukaAllegro: "urdf/kuka_allegro_description/kuka_allegro_v2.urdf"

task:

  do_random_resets: False 

  domain_randomization:
    randomize_friction: False 
    friction_lower_limit: 0.6
    friction_upper_limit: 1.2 
    
    randomize_object_mass: False  
    mass_lower_limit: 0.8
    mass_upper_limit: 1.2 
    
    randomize_object_com: False
    com_lower_limit: -0.05
    com_upper_limit: 0.05

    randomize_table_position: False  
    table_y_lower: 0.45
    table_y_upper: 0.55
    table_z_lower: 0.01 
    table_z_upper: 0.05

    randomize_table_friction: False
    table_friction_lower_limit: 0.6
    table_friction_upper_limit: 1.2


sim:
  substeps: 2
  dt: 0.00833 #  1/120
  up_axis: "z"
  use_gpu_pipeline: True #${eq:${...pipeline},"gpu"}
  num_client_threads: 8

  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: 6
    solver_type: 1  # 0: pgs, 1: tgs
    num_position_iterations: 8
    num_velocity_iterations: 0

    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_offset: 0.002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 25.0
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)
